/**
 * IN2 Logic Tree File
 *
 * This file has been generated by an IN2 compiler.
 */
/*eslint-disable-line*/ function run(isDryRun) {
  /* global player, core, engine */
  const files = {};
  const scope = {};
  const CURRENT_NODE_VAR = 'curIN2n';
  const CURRENT_FILE_VAR = 'curIN2f';
  const LAST_FILE_VAR = 'lasIN2f';

  files[`sadelica.json`] = id => {
    player.set(CURRENT_FILE_VAR, 'sadelica.json');
    if (player.get('alinea_dockmaster_asked_job') === undefined)
      player.set('alinea_dockmaster_asked_job', false);
    // action
    scope.gl0 = () => {
      player.set(CURRENT_NODE_VAR, 'gl0');
      scope.Cmk();
    };

    // text
    scope.Cmk = () => {
      player.set(CURRENT_NODE_VAR, 'Cmk');
      let text = `An official-looking dockworker resides in this building, sitting behind a desk of papers.  She meticulously inks a quill and writes, glancing up only momentarily as you enter.`;
      core.say(text, scope.b2t);
    };

    // choice
    scope.b2t = () => {
      player.set(CURRENT_NODE_VAR, 'b2t');
      let text = `What do you ask?`;
      core.choose(text, 'b2t', [
        {
          t: `What does the Dockmaster do?`,
          cb: scope.yiQ,
          c: () => {
            return player.get('alinea_dockmaster_asked_job');
          },
        },
        {
          t: `What is your name?`,
          cb: scope.TAO,
          c: () => {
            return true;
          },
        },
        {
          t: `What is your job?`,
          cb: scope.Vc5,
          c: () => {
            return true;
          },
        },
        {
          t: `Nevermind.`,
          cb: scope.sPI,
          c: () => {
            return true;
          },
        },
      ]);
    };

    // text
    scope.yiQ = () => {
      player.set(CURRENT_NODE_VAR, 'yiQ');
      let text = `She sighs and puts her quill down.`;
      core.say(text, scope.uf8);
    };

    // text
    scope.uf8 = () => {
      player.set(CURRENT_NODE_VAR, 'uf8');
      let text = `"Basically, I'm in charge here.  You want to bring your caravan to the docks? You have to go through me.  You want to park your boat at my port?  You have to ask me.  You want access to the warehouses.  You guessed it: ask me."`;
      core.say(text, scope.Y0n);
    };

    // text
    scope.Y0n = () => {
      player.set(CURRENT_NODE_VAR, 'Y0n');
      let text = `"Now like I said, I have a lot of these kinds of requests, and I have to answer ALL of them.  So please, stop bothering me."`;
      core.say(text, scope.Hxk);
    };

    // text
    scope.Hxk = () => {
      player.set(CURRENT_NODE_VAR, 'Hxk');
      let text = `She picks up her quill and resumes writing.`;
      core.say(text, scope.b2t);
    };

    // text
    scope.TAO = () => {
      player.set(CURRENT_NODE_VAR, 'TAO');
      let text = `"Hmph.  You must be immigrants.  I'm Claire.  Dockmaster Claire."`;
      core.say(text, scope.b2t);
    };

    // action
    scope.Vc5 = () => {
      player.set(CURRENT_NODE_VAR, 'Vc5');
      player.set('alinea_dockmaster_asked_job');
      scope.b8O();
    };

    // text
    scope.b8O = () => {
      player.set(CURRENT_NODE_VAR, 'b8O');
      let text = `"I am the Dockmaster in Alinea.  It's a very busy job.  So unless you have business with me, I'd appreciate it you left here and didn't make any trouble."`;
      core.say(text, scope.b2t);
    };

    // next_file
    scope.sPI = () => {
      player.set(LAST_FILE_VAR, player.get(CURRENT_FILE_VAR));
      let key = `main.json`;
      let func = files[key];
      if (func) {
        func();
      } else {
        core.say(
          `EXECUTION WARNING, no file exists named ${key}. You are probably running a subset of all the files, and not the whole scenario. ` +
            Object.keys(files),
          files.exit
        );
      }
    };

    if (id === undefined) {
      scope.gl0();
    } else if (id) {
      scope[id]();
    }
    return player.state;
  };
  files.exit = () => {
    core.exit();
  };
  if (!isDryRun) {
    files['sadelica.json']();
  }
  return { files, scope };
}
